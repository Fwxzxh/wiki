<!DOCTYPE html><html lang="es"><head><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta charset="UTF-8"><meta name="viewport" content="user-scalable=yes, width=device-width, initial-scale=1, maximum-scale=5"><meta name="theme-color" content="#1976d2"><meta name="msapplication-TileColor" content="#1976d2"><meta name="msapplication-TileImage" content="/_assets/favicons/mstile-150x150.png"><title>Edit Guia Csharp | fwxzxh wiki</title><meta name="description" content=""><meta property="og:title" content="Edit Guia Csharp"><meta property="og:type" content="website"><meta property="og:description" content=""><meta property="og:image"><meta property="og:url" content="http://wiki.fwxzxh.dev/e/es/Lenguajes/Csharp/Csharp"><meta property="og:site_name" content="fwxzxh wiki"><link rel="apple-touch-icon" sizes="180x180" href="/_assets/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="192x192" href="/_assets/favicons/android-chrome-192x192.png"><link rel="icon" type="image/png" sizes="32x32" href="/_assets/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/_assets/favicons/favicon-16x16.png"><link rel="mask-icon" href="/_assets/favicons/safari-pinned-tab.svg" color="#1976d2"><link rel="manifest" href="/_assets/manifest.json"><script>var siteConfig = {"title":"fwxzxh wiki","theme":"default","darkMode":true,"tocPosition":"right","lang":"es","rtl":false,"company":"fwxzxh","contentLicense":"alr","logoUrl":"/logo.png"}
var siteLangs = []
</script><link type="text/css" rel="stylesheet" href="https://use.fontawesome.com/releases/v5.10.0/css/all.css"><link type="text/css" rel="stylesheet" href="/_assets/css/app.9c9c450cb14e3018d1b1.css"><script type="text/javascript" src="/_assets/js/runtime.js?1671844980"></script><script type="text/javascript" src="/_assets/js/app.js?1671844980"></script></head><body><div id="root"><editor :page-id="29" locale="es" path="Lenguajes/Csharp/Csharp" title="Guia Csharp" description="" :tags="[&quot;c#&quot;,&quot;oop&quot;]" :is-published="true" publish-start-date="" publish-end-date="" script-css="" script-js="" init-mode="update" init-editor="markdown" init-content="" checkout-date="2022-12-26T00:14:36.282Z" effective-permissions="eyJjb21tZW50cyI6eyJyZWFkIjpmYWxzZSwid3JpdGUiOmZhbHNlLCJtYW5hZ2UiOmZhbHNlfSwiaGlzdG9yeSI6eyJyZWFkIjp0cnVlfSwic291cmNlIjp7InJlYWQiOnRydWV9LCJwYWdlcyI6eyJyZWFkIjp0cnVlLCJ3cml0ZSI6dHJ1ZSwibWFuYWdlIjp0cnVlLCJkZWxldGUiOnRydWUsInNjcmlwdCI6dHJ1ZSwic3R5bGUiOnRydWV9LCJzeXN0ZW0iOnsibWFuYWdlIjp0cnVlfX0="></editor></div></body></html>